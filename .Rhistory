?vector
df <- data.frame(x = 1:3, y = 5:7)
## Error:
try(as.vector(data.frame(x = 1:3, y = 5:7), mode = "numeric"))
?lm
?type
?factor
?scatter.smooth
ggplot( mtcars, aes() )
library(ggplot2)
ggplot( mtcars, aes(x=wt, y=mpg) ) + geom_point()
ggplot( mtcars, aes(x=wt, y=mpg) ) + geom_point()
head(mtcars)
?plot
plot( mtcars$wt, mtcars$mpg )
lmfit<-lm(mpg~wt, data=mtcars)
plot(lmfit)
head( mtcars )
library(plyr)
?ldply
?ldply
?ldply
?ldply
?ldply
?ldply
c( c( 1,2,3 ), c( 1,2, c(1,2,3) ) )
c( c( 1,2,3 ), c( 1,2, c(1,2,3) ) ) == c(1,2,3,1,2,1,2,3)
as.list(1:6)
type(c(1,2,3))
typeof(c(1,2,3))
?list
?c
?list
?vector
?list
?array
?list
beaver1
head(beaver1)
library(ggplot2)
ggplot(beaver1, aes(x=day, y=temp)) + geom_point()
beaver1$daytime <- beaver1$day * 1000 + beaver1$time
View(beaver1)
ggplot(beaver1, aes(x=daytime, y=temp)) + geom_point()
ggplot(beaver1, aes(x=daytime, y=temp)) + geom_line()
d <- read.csv("/media/alec/DAA8-1F9D/thirdStabCoding.csv")
rgeom(0.1)
rgeom(0.1, 0.1)
rgeom(1, 0.1)
rgeom(1, 0.1)
rgeom(1, 0.1)
rgeom(1, 0.1)
source('~/Downloads/musiclabsim.R')
install.packages(ineq)
install.packages("ineq")
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
for( i in 1:150 ) {
# note: not really switching enough...
myr <- ranking
for (j in 1:V*48/2) {
myr <- permute(myr)
}
ilisten = rgeom(1, .1)+1
ilisten = 5
songs <- vector()
if(F) {
# repeated drawing from urn
for (j in 1:ilisten) {
songs <- c(songs, sample(urn, 1))
}
songs <- unique(songs)
}
if(T) {
# unique draws (this shouldn't be so annoying)
myurn <- urn
for (j in 1:ilisten) {
if (length(myurn) == 0) {
break;
} else if (length(myurn) == 1) {
draw <- myurn
} else {
draw <- sample(myurn, 1)
}
songs <- c(songs, draw)
myurn <- myurn[ ! myurn %in% draw ]
}
}
# find rankings
like <- match(songs, myr)
fav <- which(like==min(like))
fav <- songs[[ fav ]]
dis <- match(fav, myr)
dises <- c(dises, dis)
gini <- ineq(unlist(getCount(urn)[,"count"]),type="Gini")
ginis <- c(ginis, gini)
urn <- c(urn, fav)
}
finalGinis <- c(finalGinis, gini)
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
source('~/Downloads/musiclabsim.R')
finalGinis
S
install.packages("RDS")
library(RDS)
help(RDS)
help(RDS::as.rds.data.frame)
help(as.rds.data.frame)
pwd
pwd()
cwd
%cwd
d <- read.csv('test.csv')
setwd("~/projects/RDS-simulation")
d <- read.csv('test.csv')
as.rds.data.frame(d, id = d$recruit, population.size = 200000, max.coupons = 3, recruiter.id = d$recruiter)
as.rds.data.frame(d, id = 1, population.size = 200000, max.coupons = 3, recruiter.id = d$recruiter)
d$recruit
as.rds.data.frame(d, id = d$recruit, population.size = 200000, max.coupons = 3, recruiter.id = d$recruiter)
as.rds.data.frame(d, id = "recruit", population.size = 200000, max.coupons = 3, recruiter.id = d$recruiter)
as.rds.data.frame(d, id = "recruit", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
help("as.rds.data.frame")
as.rds.data.frame(d, id = "recruit", network.size = 100, population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
d <- read.csv('test.csv')
as.rds.data.frame(d, id = "recruit", network.size = "degree", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
d[ is.na( d$recruiter ), ]
d <- d[ ~ is.na( d$recruiter ), ]
d <- d[ ! is.na( d$recruiter ), ]
length(d)
length(d[0])
length(d$recruiter)
as.rds.data.frame(d, id = "recruit", network.size = "degree", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
seeds <- d[ is.na( d$recruiter ), "recruit"]
seeds
d <- read.csv('test.csv')
seeds <- d[ is.na( d$recruiter ), "recruit"]
seeds
d[ d$recruit %in% seeds, "recruit" ] <- -1
seeds <- d[ is.na( d$recruiter ), "recruit"]
seeds
d <- d[ d$recruit != -1, ]
as.rds.data.frame(d, id = "recruit", network.size = "degree", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
d[ d$recruiter %in% seeds, "recruiter" ] <- -1
d <- read.csv('test.csv')
# all seeds should be given the same unique identifier
seeds <- d[ is.na( d$recruiter ), "recruit"]
d[ d$recruit %in% seeds, "recruit" ] <- -1
d[ d$recruiter %in% seeds, "recruiter" ] <- -1
d <- d[ d$recruit != -1, ]
as.rds.data.frame(d, id = "recruit", network.size = "degree", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
cumulative.estimate(rds.df, outcome.variable = "black")
rds.df <- as.rds.data.frame(d, id = "recruit", network.size = "degree", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
cumulative.estimate(rds.df, outcome.variable = "black")
RDS.I.estimates(rds.df, outcome.variable = "black")
RDS.II.estimates(rds.df, outcome.variable = "black")
reingold.tilford.plot(rds.df)
library(RDS)
d <- read.csv('test.csv')
# all seeds should be given the same unique identifier
seeds <- d[ is.na( d$recruiter ), "recruit"]
d[ d$recruit %in% seeds, "recruit" ] <- -1
d[ d$recruiter %in% seeds, "recruiter" ] <- -1
d <- d[ d$recruit != -1, ]
rds.df <- as.rds.data.frame(d, id = "recruit", network.size = "degree", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
cumulative.estimate(rds.df, outcome.variable = "black")
RDS.I.estimates(rds.df, outcome.variable = "black")
RDS.II.estimates(rds.df, outcome.variable = "black")
reingold.tilford.plot(rds.df)
library(RDS)
d <- read.csv('test.csv')
# all seeds should be given the same unique identifier
seeds <- d[ is.na( d$recruiter ), "recruit"]
d[ d$recruit %in% seeds, "recruit" ] <- -1
d[ d$recruiter %in% seeds, "recruiter" ] <- -1
d <- d[ d$recruit != -1, ]
rds.df <- as.rds.data.frame(d, id = "recruit", network.size = "degree", population.size = 200000, max.coupons = 3, recruiter.id = "recruiter")
cumulative.estimate(rds.df, outcome.variable = "black")
RDS.I.estimates(rds.df, outcome.variable = "black")
RDS.II.estimates(rds.df, outcome.variable = "black")
reingold.tilford.plot(rds.df)
d <- read.csv('data/smallNeighborhood.full.csv')
hist(d$wage)
plot(d$wage, d$degree)
plot(d$wage, d$educ)
plot(d$wage, d$black)
plot(d$wage, d$ability)
plot(d$black, d$ability)
lm.fit( log( d$wage ), d[,c("ability","black","degree","educ")]
)
lm.fit( log( d$wage ), as.matrix(d[,c("ability","black","degree","educ")]) )
lm.fit( as.matrix(log( d$wage )), as.matrix(d[,c("ability","black","degree","educ")]) )
l <- lm.fit( as.matrix(log( d$wage )), as.matrix(d[,c("ability","black","degree","educ")]) )
l$coefficients
log(d$wage)
d$wage
l <- lm.fit( as.matrix(log( d$wage )), as.matrix(d[,c("ability","black","degree","educ")], d$educ*d$black) )
d$educ * d$black
length(d$educ)
l <- lm.fit( as.matrix(log( d$wage )), as.matrix(d[,c("ability","black","degree","educ")], d$educ*d$black) )
d$educblack = d$educ*d$black
l <- lm.fit( as.matrix(log( d$wage )), as.matrix(d[,c("ability","black","educ", "educblack")]) )
l$coefficients
d <- read.csv('data/smallNeighborhood.full.csv')
# interesting. can I get the OLS back?
d$educblack = d$educ*d$black
l <- lm.fit( as.matrix(log( d$wage )), as.matrix(d[,c("ability","black","educ", "educblack")]) )
# not at all!?
l$effects
l$residuals
l$rank
l$qr
?lm
l <- lm(lnwage ~ black + educ + educblack + ability, d)
l <- lm(d$lnwage ~ black + educ + educblack + ability, d)
d$lnwage
d$lnwage = log(d$wage)
l <- lm(lnwage ~ black + educ + educblack + ability, d)
l$coefficients
l$model
summary(lm)
summary(l)
